Linux implementation of Wi-SUN
==============================

This projects aims to implement the Wi-SUN protocol on Linux devices and
especially allow to use Linux as Border Router for Wi-SUN networks . For now
this work is mostly a port of the nanostack project on Linux hosts. However, the
goal is to replace services currently provided by the nanostack by native
Linux services.

Quick start guide
-----------------

=== Prerequisites

This project provide a daemon which takes care of all the high level stuff of
the Wi-SUN protocol. Then a RF device (RF Co-Processor, RCP) is necessary to
transmit the data.  Currently, the only supported device is the EFR32.

The EFR32 need to flashed with a specific firmware in order to communicate with
the daemon. This firmware has not et been merged with the master branch of the
Wi-SUN component. It is [available here][1]. The last tag tested is
"rcp-v0.0.2". You will be able to compile the project wisunrcp as usual using
the `slc` tool provided by Silabs. Then, you obviously need to flash the
firmware.

For now, from the RF device point of view, the serial link is the only bus
supported to communicate with the host. Thanks to the WSTK board, the serial
link is provided over the USB connector of the WSTK board. The device /dev/ACMx
should appears when you plug the WSTK.

[1]: https://stash.silabs.com/scm/~jepouill/wisun

=== Compile

The project depends on libnl-3-dev and libpcap. For the build, you will need
`cmake`. We also encourage use of Ninja as `cmake` back-end.

On Debian and its derivatives, you can install the necessary dependencies with:

    sudo apt-get install libnl-3-dev libpcap-dev cmake ninja-build

Then you can compile with:

    cmake -G Ninja .
    ninja

And finally, you may install the service with:

   ninja install

Note that no scripts for any start up service are provided for now.

=== Launch

The Wi-SUN network will use IPv6. Router advertisement on the Wi-SUN network
interface is necessary to make it work correctly.

The configuration of the Router Advertiser hightly depends on your network
environment. An example could be to run radvd with this radvd.conf:

    interface tun0
    {
        AdvSendAdvert on;
        IgnoreIfMissing on;
        AdvDefaultLifetime 0;
        prefix fd01:1236::/64
        {
        };
    };

Note that an IP address will also been necessary on interface `tun0`. You can
provide one manually with `ip addr add` and leave radvd to make the job with
`sysctl net.ipv6.conf.tun0.accept_ra=2`.

Then, you need certficates and keys to authenticate the Wi-SUN nodes of your
network. The generation of these files is described in [[Generate Wi-SUN PKI]].
For now, you can use the examples installed in `/usr/share/wsbrd/examples/`.

So, you can run the Wi-SUN Border Router daemon with:

    cp -r /usr/share/wsbrd/examples/ pki
    sudo wsbrd -A pki/ca_cert.pem -C pki/br_cert.pem -K pki/br_key.pem -u /dev/ttyACMx

wsbrd accept several option to set the regulation domain, etc... They are
documented in the output of `wsbrd --help`

Generate Wi-SUN PKI
-------------------

TBD


Run `wsbrd` without root privileges
-----------------------------------

If we are a bit careful, it possible to launch `wsbrd` without root privileges.

First, ensure you have permission to access to UART device:

    sudo usermod -d dialout YOUR_USER

(you have to logout/login after this step)

Create a tun interface:

    sudo ip tuntap add mode tun tun0 user YOUR_USER

Start wsbrd:

    wsbrd -A pki/ca_cert.pem -C pki/br_cert.pem -K pki/br_key.pem -t tun0 -u /dev/ttyACM0


Run `wsbrd` without RF hardware
-------------------------------

The compilation also generate binary `wshwsim` that simulate a RF device.
This binary is not installed by default, you will find it in your build
directory.

To use it, you have first to create a pseudo UART device (a PTY) with `socat`:

    socat -d -d pty,raw,echo=0 pty,raw,echo=0

Then, report the names of created device to arguments of wsbrd and wshwsim:

    ./wshwsim -u /dev/pty1 /dev/null
    ./wsbrd -A pki/ca_cert.pem -C pki/br_cert.pem -K pki/br_key.pem -u /dev/pty2

The project also generate binary `wsnode` that act as a Wi-SUN node. `wsnode`
will connect automatically to the Wi-SUN network and reply to the ping requests.
It is sufficient for rough testing. Like `wsbrd`, `wsnode` need a RF device to
work. The hardware can also been simulated with `wshwsim`:

    socat -d -d pty,raw,echo=0 pty,raw,echo=0
    [...]
    ./wshwsim -u /dev/pty3 /devnull
    ./wsnode -A pki/ca_cert.pem -C pki/node_cert.pem -K pki/node_key.pem -u /dev/pty4

Finally, you can link the `wshwsim` together using a third PTY:

    socat -d -d pty,raw,echo=0 pty,raw,echo=0
      -> return /dev/pts/1 and /dev/pts/2
    socat -d -d pty,raw,echo=0 pty,raw,echo=0
      -> return /dev/pts/3 and /dev/pts/4
    socat -d -d pty,raw,echo=0 pty,raw,echo=0
      -> return /dev/pts/5 and /dev/pts/6
    ./wshwsim -u /dev/pts/3 /dev/pts/1
    ./wsbrd -u /dev/pts/4 -A pki/ca_cert.pem -C pki/br_cert.pem -K pki/br_key.pem
    ./wshwsim -u /dev/pts/5 /dev/pts/2
    ./wsnode -u /dev/pts/6 -A pki/ca_cert.pem -C pki/node_cert.pem -K pki/node_key.pem

